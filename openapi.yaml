openapi: 3.0.1
info:
  title: Developer Plugin
  description: A plugin to generate PRs for github projects
  version: "v1"
servers:
  - url: http://localhost:5003
paths:
  /run:
    post:
      summary: Run a shell command
      operationId: run_cmd
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                cmd:
                  type: string
                  description: The shell command to run
                stdout:
                  type: boolean
                  default: true
                  description: Return stdout in the response
                stderr:
                  type: boolean
                  default: false
                  description: Return stderr in the response
                timeout:
                  type: integer
                  default: 10
                  description: Timeout for the command execution in seconds
      responses:
        "200":
          description: Command executed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  exit_code:
                    type: integer
                    description: The exit code of the command
                  stdout:
                    type: string
                    description: The stdout of the command, if requested
                  stderr:
                    type: string
                    description: The stderr of the command, if requested
        "408":
          description: Command execution timed out
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: The error message
                  stdout:
                    type: string
                    description: The stdout of the command, if available
                  stderr:
                    type: string
                    description: The stderr of the command, if available
  /list_files:
    post:
      summary: List files in a directory
      operationId: list_files
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                base_directory:
                  type: string
                  description: Optional base directory to list files from, defaults to project directory
                regexp:
                  type: string
                  description: Optional regular expression to filter the files
                limit:
                  type: integer
                  description: Optional limit for the number of files to return
      responses:
        "200":
          description: Files listed successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    path:
                      type: string
                      description: The file path
                    ctime:
                      type: string
                      format: date-time
                      description: The file creation time
                    mtime:
                      type: string
                      format: date-time
                      description: The file modification time
                    size:
                      type: integer
                      description: The file size in bytes
        "400":
          description: Invalid base directory
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: The error message
  /create_update_file:
    post:
      operationId: create_update_file
      summary: Create or update a file
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                path:
                  type: string
                  description: The full path of the file to create or update
                content:
                  type: string
                  description: The content to write to the file
      responses:
        "200":
          description: File created or updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: The success message
        "500":
          description: Error creating or updating the file
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: The error message
  /delete_file:
    post:
      operationId: delete_file
      summary: Delete a file
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                path:
                  type: string
                  description: The full path of the file to delete
      responses:
        "200":
          description: File deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: The success message
        "400":
          description: Invalid file path
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: The error message
        "500":
          description: Error deleting the file
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: The error message
  /repos/{owner}/{repo}/issues:
    get:
      operationId: listRepositoryIssues # Add operationId here
      summary: List all issues for a repository
      parameters:
        - name: owner
          in: path
          required: true
          description: The account owner of the repository
          schema:
            type: string
        - name: repo
          in: path
          required: true
          description: The name of the repository
          schema:
            type: string
        - name: state
          in: query
          description: Indicates the state of the issues to return. Can be either open, closed, or all.
          schema:
            type: string
            enum: [open, closed, all]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Issue"
    post:
      operationId: createIssue
      summary: Create a new issue for a repository
      parameters:
        - name: owner
          in: path
          required: true
          description: The account owner of the repository
          schema:
            type: string
        - name: repo
          in: path
          required: true
          description: The name of the repository
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: The title of the issue
                body:
                  type: string
                  description: The body text of the issue (optional)
              required:
                - title
  /repos/{owner}/{repo}/issues/{issue_number}:
    get:
      operationId: getIssueByNumber # Add operationId here
      summary: Get a specific issue by issue number
      parameters:
        - name: owner
          in: path
          required: true
          description: The account owner of the repository
          schema:
            type: string
        - name: repo
          in: path
          required: true
          description: The name of the repository
          schema:
            type: string
        - name: issue_number
          in: path
          required: true
          description: The issue number
          schema:
            type: integer
      responses:
        "200":
          description: The details of the issue
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Issue"
    put:
      operationId: updateIssue
      summary: Update an issue.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                body:
                  type: string
                state:
                  type: string
                  enum:
                    - open
                    - closed
              required:
                - title
      responses:
        200:
          description: OK
    patch:
      operationId: closeIssue
      summary: Close an issue.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: string
                  enum:
                    - closed
              required:
                - state
      responses:
        200:
          description: OK
    post:
      operationId: commentIssue
      summary: Comment on an issue.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  type: string
              required:
                - body
      responses:
        201:
          description: Created
  /search/issues:
    get:
      operationId: searchIssues
      summary: Search issues based on a query
      parameters:
        - name: q
          in: query
          required: true
          description: The search query
          schema:
            type: string
      responses:
        "200":
          description: A list of issues matching the search query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Issue"
components:
  schemas:
    Issue:
      type: object
      properties:
        id:
          type: integer
          format: int64
        number:
          type: integer
          format: int32
        title:
          type: string
        body:
          type: string
        state:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        user:
          type: object
          properties:
            login:
              type: string
            id:
              type: integer
              format: int6
